<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2023 by European Commission
  ~
  ~ Licensed under the EUPL, Version 1.2 or - as soon they will be
  ~ approved by the European Commission - subsequent versions of the
  ~ EUPL (the "Licence");
  ~ You may not use this work except in compliance with the Licence.
  ~ You may obtain a copy of the Licence at:
  ~ https://joinup.ec.europa.eu/page/eupl-text-11-12
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the Licence is distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  ~ implied.
  ~ See the Licence for the specific language governing permissions and
  ~ limitations under the Licence.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

    <!--

    Configuration repository path either from ENVIRONMENT variable or COMMAND LINE -D option of
            EIDAS_CONFIG_REPOSITORY and
         For any other option - like hard-coded values - modify this file.
          Hard coding example:

    <bean id="specificCommunicationConfigRepository" class="java.lang.String">
        <constructor-arg value="c:/PGM/projects/configEidas/glassfish/" />
    </bean>

    -->

    <!--mandatory ENV-->
    <!--exported to: eidas-specific-proxyservice module-->
    <bean id="specificProxyServiceConfigRepository" class="java.lang.String">
        <constructor-arg
                value="#{ systemProperties['SPECIFIC_PROXY_SERVICE_CONFIG_REPOSITORY'] ?: (systemEnvironment['SPECIFIC_PROXY_SERVICE_CONFIG_REPOSITORY'].endsWith(systemProperties['file.separator']) ? systemEnvironment['SPECIFIC_PROXY_SERVICE_CONFIG_REPOSITORY'] : (systemEnvironment['SPECIFIC_PROXY_SERVICE_CONFIG_REPOSITORY'] + systemProperties['file.separator'])) }"/>
    </bean>

    <!--exported to: eidas-specific-communication-definition module-->
    <bean id="specificCommunicationConfigRepository" class="java.lang.String">
        <constructor-arg
                value="#{ specificProxyServiceConfigRepository }"/>
    </bean>

    <!--    Proxy to specific-->
    <import resource="classpath:proxySpecificCommunicationCaches.xml" />

    <bean id="proxyCommunicationService" class="eu.eidas.specificcommunication.protocol.impl.SpecificCommunicationAdapterService" scope="prototype">
        <constructor-arg index="0" ref="serviceRequestService"/>
        <constructor-arg index="1" ref="serviceResponseService"/>
    </bean>

    <bean id="serviceRequestService" class="eu.eidas.specificcommunication.protocol.impl.RequestSpecificCommunicationServiceImpl" scope="prototype">
        <constructor-arg index="0" type="java.lang.String" value="${lightToken.proxyservice.request.issuer.name}"/>
        <constructor-arg index="1" type="java.lang.String" value="${lightToken.proxyservice.request.secret}"/>
        <constructor-arg index="2" type="java.lang.String" value="${lightToken.proxyservice.request.algorithm}"/>
        <constructor-arg index="3" ref="nodeSpecificProxyserviceRequestCache"/>
    </bean>

    <bean id="serviceResponseService" class="eu.eidas.specificcommunication.protocol.impl.ResponseSpecificCommunicationServiceImpl" scope="prototype">
        <constructor-arg index="0" type="java.lang.String" value="${lightToken.proxyservice.response.issuer.name}"/>
        <constructor-arg index="1" type="java.lang.String" value="${lightToken.proxyservice.response.secret}"/>
        <constructor-arg index="2" type="java.lang.String" value="${lightToken.proxyservice.response.algorithm}"/>
        <constructor-arg index="3" ref="specificNodeProxyserviceResponseCache"/>
    </bean>
</beans>