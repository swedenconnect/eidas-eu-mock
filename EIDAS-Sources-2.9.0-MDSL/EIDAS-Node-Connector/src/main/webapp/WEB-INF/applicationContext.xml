<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024 by European Commission
  ~
  ~ Licensed under the EUPL, Version 1.2 or - as soon they will be
  ~ approved by the European Commission - subsequent versions of the
  ~ EUPL (the "Licence");
  ~ You may not use this work except in compliance with the Licence.
  ~ You may obtain a copy of the Licence at:
  ~ https://joinup.ec.europa.eu/page/eupl-text-11-12
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the Licence is distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  ~ implied.
  ~ See the Licence for the specific language governing permissions and
  ~ limitations under the Licence.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd

						http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd 
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<context:annotation-config/>
	<context:component-scan base-package="eu.eidas.node"/>

	<cache:annotation-driven/>
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="whitelist"/>
            </set>
        </property>
    </bean>
	<import resource="classpath:environmentContext.xml" />

	<import resource="classpath:specificCommunicationDefinitionApplicationContext.xml"/>

    <import resource="classpath:jCacheImplNodeBeans.xml"/>

    <bean id="eidasConfigFile" class="java.lang.String">
        <constructor-arg value="eidas.xml" />
    </bean>

	<bean id="eidasConfigFileWithPath" class="java.lang.String">
		<constructor-arg value="file:#{eidasConfigRepository}#{eidasConfigFile}"/>
	</bean>

	<bean id="defaultProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean" >
		<property name="location" value="classpath:default/eidas.xml" />
	</bean>

	<bean id="nodeProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties" ref="defaultProps" />
		<property name="location" ref="eidasConfigFileWithPath"/>
	</bean>
	<bean id="placeholderConfig" class="eu.eidas.node.utils.PropertiesUtil">
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="order" value="-2147483648"/>
		<property name="properties" ref="defaultProps" />
		<property name="locations">
			<list>
				<ref bean="eidasConfigFileWithPath"/>
				<ref bean="deploymentSpecificConnectorConfig"/>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<bean id="deploymentSpecificConnectorConfig" class="java.lang.String">
		<constructor-arg value="classpath:deploymentSpecificConnectorConfig.properties" />
	</bean>

	<bean id="specificConnectorJar" class="java.lang.Boolean">
		<constructor-arg value="${specificConnectorDeployedJar}" />
	</bean>


	<!-- PROPERTIES -->
    <bean id="applicationContextProvider" class="eu.eidas.node.BeanProvider"/>

	<bean id="reloadMetadataCacheAppContextListener" class="eu.eidas.node.ReloadMetadataCacheAppContextListener">
		<property name="metadataCache" ref="metadataCacheImpl"/>
		<property name="rolloverMetadataCache" ref="metadataRolloverCacheImpl"/>
	</bean>

    <!-- Resource bundle to translate Service error codes -->
    <bean id="transMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="eidastranslation"/>
	</bean>

	<!-- Resource bundle to log error messages to sys-admins -->
    <bean id="sysadminMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="sysadmin"/>
	</bean>

	<!-- Resource bundle to log error messages -->
    <bean id="errorMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="errors"/>
	</bean>

	<bean id="NodeProtocolEngineConfigurationFactory" class="eu.eidas.auth.engine.configuration.dom.ProtocolEngineConfigurationFactory" scope="singleton">
		<constructor-arg value="SamlEngine.xml"/>
		<constructor-arg value=""/>
		<constructor-arg value="#{eidasConfigRepository}"/>
	</bean>

	<bean id="NodeProtocolEngineFactory" class="eu.eidas.auth.engine.ProtocolEngineFactory" scope="singleton">
		<constructor-arg ref="NodeProtocolEngineConfigurationFactory"/>
	</bean>

	<bean id="samlEngine" class ="eu.eidas.auth.engine.ProtocolEngineI" scope="prototype"
		  factory-bean="NodeProtocolEngineFactory"
		  factory-method="getProtocolEngine">
		<constructor-arg type="java.lang.String" value="${saml.connector}"/>
	</bean>

	<bean id="connectorFlowIdCache" class="eu.eidas.auth.commons.tx.FlowIdCache">
		<constructor-arg ref="connectorFlowIdCacheImpl"/>
	</bean>

	<bean id="specificConnectorLightRequestCorrelationCache" class="eu.eidas.auth.commons.tx.StoredLightRequestCorrelationCache">
		<constructor-arg ref="springConnectorCMapspecificLightCorProviderImpl"/>
	</bean>

    <bean id="connectorRequestCorrelationCache" class="eu.eidas.auth.commons.tx.StoredLightRequestCorrelationCache">
		<constructor-arg ref="springConnectorCMapCorProviderImpl"/>
	</bean>

	<!-- SPECIFIC Classes -->

     <bean id="springManagedSecurityConfig" class="eu.eidas.security.ConfigurationSecurityBean" scope="prototype">
         <property name="ipMaxRequests" value="${max.requests.ip}" />
         <property name="spMaxRequests" value="${max.requests.sp}" />
         <property name="ipMaxTime" value="${max.time.ip}" />
         <property name="spMaxTime" value="${max.time.sp}" />
         <property name="trustedDomains" value="${trusted.sp.domains}" />
         <property name="isContentSecurityPolicyActive" value="${security.header.CSP.enabled}"/>
         <property name="cspReportingUri" value="${security.header.CSP.report.uri}"/>
         <property name="includeXXssProtection" value="${security.header.XXssProtection.block}"/>
         <property name="includeXContentTypeOptions" value="${security.header.XContentTypeOptions.noSniff}"/>
         <property name="includeXFrameOptions" value="${security.header.XFrameOptions.sameOrigin}"/>
         <property name="includeHSTS" value="${security.header.HSTS.includeSubDomains}"/>
         <property name="includeMozillaDirectives" value="${security.header.CSP.includeMozillaDirectives}"/>
		 <property name="bypassValidation" value="${validation.bypass}" />
     </bean>

    <!-- Connector requests parameters via servlet -->
    <bean id="connectorController" class="eu.eidas.node.connector.ConnectorControllerService" scope="prototype">
        <property name="specificSpRequestCorrelationCache" ref="specificConnectorLightRequestCorrelationCache"/>
        <property name="connectorRequestCorrelationCache" ref="connectorRequestCorrelationCache"/>
		<property name="connectorService" ref="springManagedAUCONNECTOR" />
		<property name="assertionConsUrl" value="${connector.assertion.url}" />
	</bean>

	<bean id="messageLoggerUtils" class="eu.eidas.logging.MessageLoggerUtils">
		<property name="protocolEngine" ref="samlEngine"/>
		<property name="flowIdCache" ref="connectorFlowIdCache"/>
		<property name="logMessage" value="${saml.audit}"/>
		<property name="logCompleteMessage" value="${full.message.logging}"/>
	</bean>

	<bean id="connectorIncomingLightRequestLogger" class="eu.eidas.node.connector.logger.request.ConnectorIncomingLightRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificCommunicationLoggingService" ref="connectorCommunicationService"/>
		<property name="lightTokenRequestNodeId" value="${lightToken.connector.request.node.id}"/>
		<property name="loggingHashDigestAlgorithm" value="${logging.hash.digest.algorithm}"/>
		<property name="loggingHashDigestProvider" value="${logging.hash.digest.provider}"/>
	</bean>
	<bean id="connectorOutgoingLightResponseLogger" class="eu.eidas.node.connector.logger.response.ConnectorOutgoingLightResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificCommunicationLoggingService" ref="connectorCommunicationService"/>
		<property name="lightTokenResponseNodeId" value="${lightToken.connector.response.node.id}"/>
		<property name="loggingHashDigestAlgorithm" value="${logging.hash.digest.algorithm}"/>
		<property name="loggingHashDigestProvider" value="${logging.hash.digest.provider}"/>
	</bean>
	<bean id="connectorOutgoingEidasRequestLogger" class="eu.eidas.node.connector.logger.request.ConnectorOutgoingEidasRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedAULoggingUtil" ref="springManagedAUCONNECTORUtil"/>
	</bean>
	<bean id="connectorIncomingEidasResponseLogger" class="eu.eidas.node.connector.logger.response.ConnectorIncomingEidasResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
	</bean>

	<!-- Connector Classes -->
	<bean id="springManagedAUCONNECTOR" class="eu.eidas.node.auth.connector.AUCONNECTOR" scope="prototype">
		<property name="samlService" ref="springManagedAUCONNECTORSAML" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
        <property name="specificSpRequestCorrelationCache" ref="specificConnectorLightRequestCorrelationCache"/>
        <property name="connectorRequestCorrelationCache" ref="connectorRequestCorrelationCache"/>
	</bean>

	<bean id="springManagedAUCONNECTORSAML" class="eu.eidas.node.auth.connector.AUCONNECTORSAML">
		<property name="samlServiceInstance" value="${saml.connector}" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
		<property name="messageSource" ref="transMessageSource"/>
        <property name="checkCitizenCertificateServiceCertificate" value="${check.citizenCertificate.serviceCertificate}" />
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="metadataFetcher" ref="connectorMetadataFetcher"/>
        <property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory"/>
		<property name="validatePrefixCountryCodeIdentifiers" value="${validate.prefix.country.code.identifiers}"/>
	</bean>

	<bean id="springManagedAUCONNECTORUtil" class="eu.eidas.node.auth.connector.AUCONNECTORUtil">
        <constructor-arg ref="springConnectorCMapAntiReplayProviderImpl"/>
		<property name="configs" ref="nodeProps" />
	</bean>

	<bean id="nodeFileMetadataProcessor" class="eu.eidas.auth.engine.metadata.impl.FileMetadataLoader">
		<property name="repositoryPath" value="${metadata.file.repository}"/>
	</bean>

	<bean id="connectorMetadataFilePath" class="java.lang.String">
		<constructor-arg value="/metadata/MetadataFetcher_Connector.properties"/>
	</bean>

	<bean id="connectorMetadataWhitelistProps" class="eu.eidas.auth.commons.io.ReloadableProperties">
		<constructor-arg value="#{connectorMetadataFilePath}" />
		<constructor-arg value="#{eidasConfigRepository}" />
	</bean>

	<bean id="connectorMetadataFetcher" class="eu.eidas.auth.engine.metadata.impl.CachingMetadataFetcher">
		<property name="cache" ref="metadataCacheImpl"/>
		<property name="rollOverMetadataConfig" ref="rollOverMetadataConfig"/>
		<property name="metadataLoaderPlugin" ref="nodeFileMetadataProcessor"/>
		<property name="httpRetrievalEnabled" value="${metadata.http.retrieval}"/>
		<property name="restrictHttp" value="${metadata.restrict.http}"/>
		<property name="tlsEnabledProtocols" value="${tls.enabled.protocols}"/>
		<property name="tlsEnabledCiphers" value="${tls.enabled.ciphers}"/>
		<property name="validateEidasMetadataSignature" value="${metadata.check.signature}"/>
		<property name="trustedEidasMetadataUrls" value="${node.metadata.not.signed.descriptors}"/>
		<property name="whitelistConfigProperties" ref="connectorMetadataWhitelistProps" />
	</bean>

	<bean id="rollOverMetadataConfig" class="eu.eidas.auth.engine.metadata.impl.RollOverMetadataConfig">
		<property name="rolloverCache" ref="metadataRolloverCacheImpl"/>
		<property name="cacheLifeSpan" value="${metadata.rollover.lifespan.seconds}"/>
		<property name="reloadCacheOnMessageEnabled" value="${metadata.rollover.certificate.enabled}"/>
	</bean>

	<bean id="connectorMetadataGeneratorSP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="connectorEngine" value="${saml.connector}"/>
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory" />
		<property name="assertionUrl" value="${connector.assertion.url}" />
		<property name="nodeUtil" ref="springManagedAUCONNECTORUtil" />
		<property name="validityDuration" value="${metadata.validity.duration}" />
		<property name="whitelistConfigProperties" ref="connectorMetadataWhitelistProps" />
	</bean>
	<bean id="eidasNodeConfigDirectory" class="java.lang.String">
		<constructor-arg value="#{placeholderConfig.getEidasXmlLocation()}"/>
	</bean>


</beans>

