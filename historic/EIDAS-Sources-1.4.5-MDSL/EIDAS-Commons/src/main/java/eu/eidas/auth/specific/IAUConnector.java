package eu.eidas.auth.specific;

import eu.eidas.auth.commons.WebRequest;
import eu.eidas.auth.commons.light.ILightRequest;
import eu.eidas.auth.commons.light.ILightResponse;
import eu.eidas.auth.commons.tx.BinaryAuthenticationExchange;
import eu.eidas.auth.commons.tx.CorrelationMap;
import eu.eidas.auth.commons.tx.StoredAuthenticationRequest;
import eu.eidas.auth.commons.tx.StoredLightRequest;

/**
 * Interface for Specific Authentication methods on the connector side.
 *
 * @since 1.1
 */
public interface IAUConnector {

    /**
     * Correlation Map between the connector request object Id and the specific request received from the
     * ServiceProvider (SP).
     *
     * @return the Correlation Map between the connector request object Id and the specific request received from the
     * ServiceProvider (SP).
     */
    CorrelationMap<StoredAuthenticationRequest> getSpecificSpRequestCorrelationMap();

    /**
     * Correlation Map between the connector request object Id and the connector request object sent to the connector.
     *
     * @return the Correlation Map between the connector request object Id and the connector request Object sent to the
     * connector.
     */
    CorrelationMap<StoredLightRequest> getConnectorRequestCorrelationMap();

    /**
     * Processes and validates the SAML Request
     *
     * @param webRequest The web request which contains the httpRequestServlet params
     * @param requestFromSP the saml request received from sp
     * @return the ILightResponse associated with the validated request.
     */
    ILightRequest processAuthenticationRequest(WebRequest webRequest, byte[] requestFromSP);

    /**
     * Generates SAML Response to send back to SP
     *
     * @param lightResponse the lightResponse generated by the connector
     * @param signAssertion whether to sign the assertion or not
     * @return The Authentication Exchange composed of the original request from the ServiceProvider and the final
     * response from the Specific Connector.
     */
    BinaryAuthenticationExchange generateAuthenticationResponse(ILightResponse lightResponse, boolean signAssertion);

}
