<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2019 by European Commission
  ~
  ~ Licensed under the EUPL, Version 1.2 or - as soon they will be
  ~ approved by the European Commission - subsequent versions of the
  ~ EUPL (the "Licence");
  ~ You may not use this work except in compliance with the Licence.
  ~ You may obtain a copy of the Licence at:
  ~ https://joinup.ec.europa.eu/page/eupl-text-11-12
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the Licence is distributed on an "AS IS" basis,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  ~ implied.
  ~ See the Licence for the specific language governing permissions and
  ~ limitations under the Licence
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd

						http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd 
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<context:annotation-config/>
	<context:component-scan base-package="eu.eidas"/>

	<cache:annotation-driven/>
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" name="whitelist"/>
            </set>
        </property>
    </bean>
	<import resource="classpath:environmentContext.xml" />

	<import resource="classpath:specificCommunicationDefinitionApplicationContext.xml"/>

    <import resource="classpath:jCacheImplNodeBeans.xml"/>

    <bean id="eidasConfigFile" class="java.lang.String">
        <constructor-arg value="eidas.xml" />
    </bean>

	<bean id="eidasConfigFileWithPath" class="java.lang.String">
		<constructor-arg value="file:#{eidasConfigRepository}#{eidasConfigFile}"/>
	</bean>

	<bean id="nodeProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" ref="eidasConfigFileWithPath"/>
	</bean>
	<bean id="placeholderConfig"
		  class="eu.eidas.node.utils.PropertiesUtil">
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="order" value="-2147483648"/>
		<property name="locations">
			<list>
				<ref bean="eidasConfigFileWithPath"/>
				<ref bean="deploymentSpecificConnectorConfig"/>
				<ref bean="deploymentSpecificProxyServiceConfig"/>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<bean id="deploymentSpecificConnectorConfig" class="java.lang.String">
		<constructor-arg value="classpath:deploymentSpecificConnectorConfig.properties" />
	</bean>

	<bean id="deploymentSpecificProxyServiceConfig" class="java.lang.String">
		<constructor-arg value="classpath:deploymentSpecificProxyServiceConfig.properties" />
	</bean>

	<bean id="specificConnectorJar" class="java.lang.Boolean">
		<constructor-arg value="${specificConnectorDeployedJar}" />
	</bean>

	<bean id="specificProxyServiceJar" class="java.lang.Boolean">
		<constructor-arg value="${specificProxyServiceDeployedJar}" />
	</bean>


	<!-- PROPERTIES -->
    <bean id="applicationContextProvider" class="eu.eidas.node.BeanProvider"/>

    <!-- Resource bundle to translate Service error codes -->
    <bean id="transMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="eidastranslation"/>
	</bean>

	<!-- Resource bundle to log error messages to sys-admins -->
    <bean id="sysadminMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="sysadmin"/>
	</bean>

	<!-- Resource bundle to log error messages -->
    <bean id="errorMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="errors"/>
	</bean>

	<bean id="NodeProtocolEngineConfigurationFactory" class="eu.eidas.auth.engine.configuration.dom.ProtocolEngineConfigurationFactory" scope="singleton">
		<constructor-arg value="SamlEngine.xml"/>
		<constructor-arg value="#{eidasConfigFile}"/>
		<constructor-arg value="#{eidasConfigRepository}"/>
	</bean>

	<bean id="NodeProtocolEngineFactory" class="eu.eidas.auth.engine.ProtocolEngineFactory" scope="singleton">
		<constructor-arg ref="NodeProtocolEngineConfigurationFactory"/>
	</bean>

	<bean id="connectorFlowIdCache" class="eu.eidas.auth.commons.tx.FlowIdCache">
		<constructor-arg ref="connectorFlowIdCacheImpl"/>
	</bean>

	<bean id="proxyServiceFlowIdCache" class="eu.eidas.auth.commons.tx.FlowIdCache">
		<constructor-arg ref="proxyServiceFlowIdCacheImpl"/>
	</bean>

	<bean id="specificConnectorLightRequestCorrelationCache" class="eu.eidas.auth.commons.tx.StoredLightRequestCorrelationCache">
		<constructor-arg ref="springConnectorCMapspecificLightCorProviderImpl"/>
	</bean>

    <bean id="connectorRequestCorrelationCache" class="eu.eidas.auth.commons.tx.StoredLightRequestCorrelationCache">
		<constructor-arg ref="springConnectorCMapCorProviderImpl"/>
	</bean>

    <bean id="proxyServiceRequestCorrelationMap" class="eu.eidas.auth.commons.tx.StoredLightRequestCorrelationCache">
		<constructor-arg ref="springServiceCMapCorProviderImpl"/>
	</bean>

	<!-- SPECIFIC Classes -->

     <bean id="springManagedSecurityConfig" class="eu.eidas.node.security.ConfigurationSecurityBean" scope="prototype">
         <property name="ipMaxRequests" value="${max.requests.ip}" />
         <property name="spMaxRequests" value="${max.requests.sp}" />
         <property name="ipMaxTime" value="${max.time.ip}" />
         <property name="spMaxTime" value="${max.time.sp}" />
         <property name="trustedDomains" value="${trusted.sp.domains}" />
         <property name="validationMethod" value="${validation.method}" />
         <property name="messageSource" ref="errorMessageSource"/>
         <property name="isContentSecurityPolicyActive" value="${security.header.CSP.enabled:true}"/>
         <property name="cspReportingUri" value="${security.header.CSP.report.uri}/cspReportHandler"/>
         <property name="isMoaActive" value="${isMoaActive:false}"/>
         <property name="includeXXssProtection" value="${security.header.XXssProtection.block:true}"/>
         <property name="includeXContentTypeOptions" value="${security.header.XContentTypeOptions.noSniff:true}"/>
         <property name="includeXFrameOptions" value="${security.header.XFrameOptions.sameOrigin:true}"/>
         <property name="includeHSTS" value="${security.header.HSTS.includeSubDomains:true}"/>
		 <property name="cspFallbackCheck" value="${security.header.CSP.fallbackCheckMode:false}"/>
         <property name="includeMozillaDirectives" value="${security.header.CSP.includeMozillaDirectives:true}"/>
		 <property name="bypassValidation" value="${validation.bypass}" />
     </bean>

    <!-- Connector requests parameters via servlet -->
    <bean id="connectorController" class="eu.eidas.node.connector.ConnectorControllerService" scope="prototype">
        <property name="specificSpRequestCorrelationCache" ref="specificConnectorLightRequestCorrelationCache"/>
        <property name="connectorRequestCorrelationCache" ref="connectorRequestCorrelationCache"/>
		<property name="connectorService" ref="springManagedAUCONNECTOR" />
		<property name="assertionConsUrl" value="${connector.assertion.url}" />
	</bean>
    <!-- Service requests parameters via servlet -->
    <bean id="serviceController" class="eu.eidas.node.service.ServiceControllerService" scope="prototype">
        <property name="proxyServiceRequestCorrelationCache" ref="proxyServiceRequestCorrelationMap"/>
        <property name="proxyService" ref="springManagedAUSERVICE" />
    </bean>
	<bean id="messageLoggerUtils" class="eu.eidas.node.logging.MessageLoggerUtils">
		<property name="samlConnectorServiceInstance" value="${saml.connector:Connector}"/>
		<property name="samlEngineProxyInstanceName" value="${saml.service:Service}"/>
		<property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory"/>
		<property name="logMessage" value="${saml.audit:true}"/>
		<property name="metadataFetcher" ref="nodeMetadataFetcher"/>
		<property name="countryCode" value="${service.countrycode}"/>
		<property name="connectorControllerService" ref="connectorController"/>
		<property name="serviceControllerService" ref="serviceController"/>
	</bean>
	<bean id="connectorIncomingLightRequestLogger" class="eu.eidas.node.connector.messages.ConnectorIncomingLightRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificConnectorCommunicationServiceExtension" ref="springManagedSpecificConnectorCommunicationServiceExtension"/>
		<property name="springManagedSpecificConnectorCommunicationService" ref="springManagedSpecificConnectorCommunicationService"/>
		<property name="flowIdCache" ref="connectorFlowIdCache"/>
	</bean>
	<bean id="connectorOutgoingLightResponseLogger" class="eu.eidas.node.connector.messages.ConnectorOutgoingLightResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificConnectorCommunicationServiceExtension" ref="springManagedSpecificConnectorCommunicationServiceExtension"/>
		<property name="springManagedSpecificConnectorCommunicationService" ref="springManagedSpecificConnectorCommunicationService"/>
		<property name="flowIdCache" ref="connectorFlowIdCache"/>
	</bean>
	<bean id="proxyServiceOutgoingLightRequestLogger" class="eu.eidas.node.service.messages.ProxyServiceOutgoingLightRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificProxyserviceCommunicationServiceExtension" ref="springManagedSpecificProxyserviceCommunicationServiceExtension"/>
		<property name="springManagedSpecificProxyserviceCommunicationService" ref="springManagedSpecificProxyserviceCommunicationService"/>
		<property name="flowIdCache" ref="proxyServiceFlowIdCache"/>
	</bean>
	<bean id="proxyServiceIncomingLightResponseLogger" class="eu.eidas.node.service.messages.ProxyServiceIncomingLightResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedSpecificProxyserviceCommunicationServiceExtension" ref="springManagedSpecificProxyserviceCommunicationServiceExtension"/>
		<property name="springManagedSpecificProxyserviceCommunicationService" ref="springManagedSpecificProxyserviceCommunicationService"/>
		<property name="flowIdCache" ref="proxyServiceFlowIdCache"/>
	</bean>
	<bean id="connectorOutgoingEidasRequestLogger" class="eu.eidas.node.connector.messages.ConnectorOutgoingEidasRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="springManagedAUCONNECTORUtil" ref="springManagedAUCONNECTORUtil"/>
		<property name="flowIdCache" ref="connectorFlowIdCache"/>
	</bean>
	<bean id="connectorIncomingEidasResponseLogger" class="eu.eidas.node.connector.messages.ConnectorIncomingEidasResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="flowIdCache" ref="connectorFlowIdCache"/>
	</bean>
	<bean id="proxyServiceIncomingEidasRequestLogger" class="eu.eidas.node.service.messages.ProxyServiceIncomingEidasRequestLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="flowIdCache" ref="proxyServiceFlowIdCache"/>
	</bean>
	<bean id="proxyServiceOutgoingEidasResponseLogger" class="eu.eidas.node.service.messages.ProxyServiceOutgoingEidasResponseLogger">
		<property name="messageLoggerUtils" ref="messageLoggerUtils"/>
		<property name="flowIdCache" ref="proxyServiceFlowIdCache"/>
	</bean>
	<!-- Node Classes -->
	<!-- Service Classes -->
	<bean id="springManagedAUSERVICE" class="eu.eidas.node.auth.service.AUSERVICE"
		scope="prototype">
		<property name="citizenService" ref="springManagedAUSERVICECitizen" />
		<property name="samlService" ref="springManagedAUSERVICESAML" />
		<property name="serviceUtil" ref="springManagedAUSERVICEUtil" />
		<property name="serviceMetadataUrl" value="${service.metadata.url}"/>
	</bean>

	<bean id="springManagedAUSERVICECitizen" class="eu.eidas.node.auth.service.AUSERVICECitizen">
		<property name="serviceUtil" ref="springManagedAUSERVICEUtil" />
		<property name="samlService" ref="springManagedAUSERVICESAML" />
	</bean>

	<bean id="springManagedAUSERVICESAML" class="${AUSERVICESAMLclass:eu.eidas.node.auth.service.AUSERVICESAML}">
		<property name="maxQAAlevel" value="${service.maxQAAlevel}" />
		<property name="minQAA" value="${min.qaaLevel.value}" />
		<property name="maxQAA" value="${max.qaaLevel.value}" />
		<property name="countryCode" value="${service.countrycode}" />
		<property name="messageSource" ref="errorMessageSource"/>
		<property name="serviceUtil" ref="springManagedAUSERVICEUtil" />
		<property name="samlEngineInstanceName" value="${saml.service:Service}" />
		<property name="serviceMetadataUrl" value="${service.metadata.url}"/>
		<property name="metadataFetcher" ref="nodeMetadataFetcher"/>
		<property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory"/>
	</bean>
	<!-- Connector Classes -->
	<bean id="springManagedAUCONNECTOR" class="eu.eidas.node.auth.connector.AUCONNECTOR"
		scope="prototype">
		<property name="samlService" ref="springManagedAUCONNECTORSAML" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
        <property name="specificSpRequestCorrelationCache" ref="specificConnectorLightRequestCorrelationCache"/>
        <property name="connectorRequestCorrelationCache" ref="connectorRequestCorrelationCache"/>
	</bean>

	<bean id="springManagedAUCONNECTORSAML" class="eu.eidas.node.auth.connector.AUCONNECTORSAML">
		<property name="samlServiceInstance" value="${saml.connector:Connector}" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
		<property name="messageSource" ref="transMessageSource"/>
        <property name="checkCitizenCertificateServiceCertificate" value="${check.citizenCertificate.serviceCertificate}" />
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="metadataFetcher" ref="nodeMetadataFetcher"/>
        <property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory"/>
	</bean>

	<bean id="springManagedAUCONNECTORUtil" class="eu.eidas.node.auth.connector.AUCONNECTORUtil">
        <constructor-arg ref="springConnectorCMapAntiReplayProviderImpl"/>
		<property name="configs" ref="nodeProps" />
		<property name="bypassValidation" value="${validation.bypass}" />
		<property name="minQAA" value="${min.qaaLevel.value}" />
		<property name="maxQAA" value="${max.qaaLevel.value}" />
	</bean>

    <bean id="springManagedAUSERVICEUtil" class="eu.eidas.node.auth.service.AUSERVICEUtil">
                <constructor-arg ref="springServiceCMapAntiReplayProviderImpl"/>
		<property name="configs" ref="nodeProps" />
	</bean>

	<bean id="nodeFileMetadataProcessor" class="eu.eidas.auth.engine.metadata.impl.FileMetadataLoader">
		<property name="repositoryPath" value="${metadata.file.repository}"/>
	</bean>

    <bean id="nodeMetadataFetcher" class="eu.eidas.auth.engine.metadata.impl.CachingMetadataFetcher" init-method="initProcessor">
        <property name="cache" ref="metadataCacheImpl"/>
        <property name="metadataLoaderPlugin" ref="nodeFileMetadataProcessor"/>
		<property name="httpRetrievalEnabled" value="${metadata.http.retrieval}"/>
		<property name="restrictHttp" value="${metadata.restrict.http}"/>
        <property name="tlsEnabledProtocols" value="${tls.enabled.protocols}"/>
        <property name="tlsEnabledCiphers" value="${tls.enabled.ciphers}"/>
		<property name="validateEidasMetadataSignature" value="${metadata.check.signature}"/>
        <property name="trustedEidasMetadataUrls" value="${node.metadata.not.signed.descriptors:}"/>
    </bean>

	<bean id="serviceMetadataGeneratorIDP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="proxyServiceEngine" value="${saml.service:Service}"/>
		<property name="proxyServiceMetadataUrl" value="${service.metadata.url}"/>
		<property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
                <property name="singleSignOnServiceRedirectLocation" value="${ssos.serviceMetadataGeneratorIDP.redirect.location}" />
                <property name="singleSignOnServicePostLocation" value="${ssos.serviceMetadataGeneratorIDP.post.location}" />
	</bean>
	<bean id="connectorMetadataGeneratorSP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="connectorEngine" value="${saml.conenctor:Connector}"/>
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="nodeProtocolEngineFactory" ref="NodeProtocolEngineFactory" />
		<property name="assertionUrl" value="${connector.assertion.url}" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
	</bean>
	<bean id="eidasNodeConfigDirectory" class="java.lang.String">
		<constructor-arg value="#{placeholderConfig.getEidasXmlLocation()}"/>
	</bean>
	<import resource="classpath:filecertmgmt.xml" />

</beans>

