/*
 * Copyright (c) 2016 by European Commission
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by
 * the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 *
 * This product combines work with different licenses. See the "NOTICE" text
 * file for details on the various modules and licenses.
 * The "NOTICE" text file is part of the distribution. Any derivative works
 * that you distribute must include a readable copy of the "NOTICE" text file.
 *
 */

package eu.eidas.sp;

import eu.eidas.auth.commons.EidasErrorKey;
import eu.eidas.auth.commons.EidasErrors;
import eu.eidas.auth.commons.attribute.AttributeDefinition;
import eu.eidas.auth.commons.attribute.AttributeRegistry;
import eu.eidas.auth.commons.attribute.PersonType;
import eu.eidas.auth.commons.attribute.impl.StringAttributeValueMarshaller;
import eu.eidas.auth.commons.exceptions.InternalErrorEIDASException;
import eu.eidas.auth.engine.AbstractProtocolEngine;
import eu.eidas.auth.engine.ProtocolEngine;
import eu.eidas.auth.engine.core.ProtocolProcessorI;
import eu.eidas.auth.engine.core.eidas.EidasProtocolProcessor;
import eu.eidas.auth.engine.metadata.MetadataFetcherI;
import eu.eidas.auth.engine.metadata.MetadataSignerI;
import eu.eidas.engine.exceptions.EIDASSAMLEngineException;
import eu.eidas.util.Preconditions;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.Collections;
import java.util.Set;

/**
 * The goal of this subclass is to allow any unknown requested attribute to be generated by the ServiceProvider.
 * <p>
 * Created by vargata on 23/06/2016.
 *
 * @since 1.1
 */
public final class SpEidasProtocolProcessor extends EidasProtocolProcessor implements ProtocolProcessorI {

    /**
     * The LOG.
     */
    private static final Logger LOG = LoggerFactory.getLogger(SpEidasProtocolProcessor.class);

    public SpEidasProtocolProcessor(@Nullable MetadataFetcherI metadataFetcher,
                                    @Nullable MetadataSignerI metadataSigner) {
        super(metadataFetcher, metadataSigner);
    }

    public SpEidasProtocolProcessor(@Nonnull AttributeRegistry additionalAttributeRegistry,
                                    @Nullable MetadataFetcherI metadataFetcher,
                                    @Nullable MetadataSignerI metadataSigner) {
        super(additionalAttributeRegistry, metadataFetcher, metadataSigner);
    }

    public SpEidasProtocolProcessor(@Nonnull String eidasAttributesFileName,
                                    @Nonnull String additionalAttributesFileName,
                                    @Nullable String defaultPath,
                                    @Nullable MetadataFetcherI metadataFetcher,
                                    @Nullable MetadataSignerI metadataSigner) {
        super(eidasAttributesFileName, additionalAttributesFileName, defaultPath, metadataFetcher, metadataSigner);
    }

    public SpEidasProtocolProcessor(@Nonnull AttributeRegistry eidasAttributeRegistry,
                                    @Nonnull AttributeRegistry additionalAttributeRegistry,
                                    @Nullable MetadataFetcherI metadataFetcher,
                                    @Nullable MetadataSignerI metadataSigner) {
        super(eidasAttributeRegistry, additionalAttributeRegistry, metadataFetcher, metadataSigner);
    }
    /**
     * Guesses the friendly name from the given full attribute name URI.
     *
     * @param name the attribute name URI
     * @return the guessed friendly name
     */
    private String extractFriendlyName(@Nonnull String name) {
        Preconditions.checkNotNull(name, "name");
        if (StringUtils.isBlank(name)) {
            return StringUtils.EMPTY;
        }
        int lastIndexOf = name.lastIndexOf('/');
        if (lastIndexOf == -1 || lastIndexOf == name.length() - 1) {
            return name;
        }
        return name.substring(lastIndexOf + 1);
    }
    /**
     * For the SP, we create unknown attributes on the fly so this method never returns {@code null}.
     *
     * @param name the full name URI of the attribute to search for
     * @return an existing attribute from the registries or a new attribute created on the fly
     */
    @Override
    @Nonnull
    public AttributeDefinition<?> getAttributeDefinitionNullable(@Nonnull String name) {
        if (StringUtils.isBlank(name)) {
            LOG.info(AbstractProtocolEngine.SAML_EXCHANGE, "BUSINESS EXCEPTION : {}",
                     ProtocolEngine.ATTRIBUTE_EMPTY_LITERAL);
            throw new InternalErrorEIDASException(EidasErrors.get(EidasErrorKey.INTERNAL_ERROR.errorCode()),
                                                  ProtocolEngine.ATTRIBUTE_EMPTY_LITERAL);
        }
        AttributeDefinition<?> attributeDefinition = getMinimumDataSetAttributes().getByName(name);
        if (null != attributeDefinition) {
            return attributeDefinition;
        }
        attributeDefinition = getAdditionalAttributes().getByName(name);
        if (null != attributeDefinition) {
            return attributeDefinition;
        }

        // For the SP, we create unknown attributes on the fly:
        AttributeDefinition<String> unknownAttribute = AttributeDefinition.<String>builder().nameUri(name)
                .friendlyName(extractFriendlyName(name))
                .personType(PersonType.NATURAL_PERSON)
                .xmlType("http://www.w3.org/2001/XMLSchema", "string", "xs")
                .attributeValueMarshaller(new StringAttributeValueMarshaller())
                .build();

        return unknownAttribute;
    }

    /**
     * Does not connect to the metadata and returns an empty Set so that all requested attributes are accepted.
     */
    @Override
    @Nonnull
    protected Set<String> getSupportedAttributes(@Nonnull String issuer) throws EIDASSAMLEngineException {
        // accept all attributes:
        return Collections.emptySet();
    }
}
